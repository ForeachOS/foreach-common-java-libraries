package com.foreach.synchronizer.text.io;

import com.foreach.spring.localization.Language;
import com.foreach.spring.localization.LanguageConfigurator;
import com.foreach.spring.localization.text.LocalizedText;
import com.foreach.spring.localization.text.LocalizedTextFields;
import org.apache.commons.lang3.time.DateUtils;
import org.junit.Before;

import java.text.ParseException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collection;

public class BaseLocalizedTextWriterTest {

    public static final String LABEL = "my.label";
    public static final String GROUP = "myGroup";
    public static final String APP = "myApp";
    public static final String TEXT_NL = "Dit is een test!";
    public static final String TEXT_EN = "This is a test!";

    @Before
    public void setup() {
        new LanguageConfigurator( TestLanguage.class );
    }

    public Collection<LocalizedText> createLocalizedTexts() throws ParseException {
        LocalizedText text1 = new LocalizedText();
        text1.setApplication( APP );
        text1.setGroup( GROUP );
        text1.setAutoGenerated( false );
        text1.setCreated( DateUtils.parseDate( "2012-02-01", "yyyy-MM-dd" ) );
        text1.setLabel( LABEL );

        LocalizedTextFields fieldsNl = createFields( TEXT_NL, LanguageConfigurator.getLanguageByCode( "NL" ) );
        LocalizedTextFields fieldsEn = createFields( TEXT_EN, LanguageConfigurator.getLanguageByCode( "EN" ) );

        text1.setFieldsAsCollection( Arrays.asList( fieldsNl, fieldsEn ) );

        Collection<LocalizedText> localizedTexts = new ArrayList<LocalizedText>();
        localizedTexts.add( text1 );
        return localizedTexts;
    }

    private LocalizedTextFields createFields( String text, Language language ) {
        LocalizedTextFields result = new LocalizedTextFields( language );
        result.setText( text );
        return result;
    }
}
