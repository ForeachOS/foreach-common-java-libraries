package com.foreach.synchronizer.text.io;

import com.foreach.spring.localization.LanguageConfigurator;
import com.foreach.spring.localization.text.LocalizedText;
import org.junit.Before;
import org.junit.Test;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;

import java.io.InputStream;
import java.text.ParseException;
import java.util.Calendar;

import static org.junit.Assert.assertEquals;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;

public class TestExcelLocalizedTextReader extends BaseLocalizedTextWriterTest {

    @Before
    public void setup() {
        new LanguageConfigurator( TestLanguage.class );
    }

    @Test
    public void testRead() throws Exception {
        InputStream inputStream = mock( InputStream.class );
        ExcelLocalizedTextReaderTester excelLocalizedTextReaderTester = new ExcelLocalizedTextReaderTester( inputStream );

        NodeList list = mock( NodeList.class );

        Node application = mock( Node.class );
        Node group = mock( Node.class );
        Node label = mock( Node.class );
        Node dutch = mock( Node.class );
        Node english = mock( Node.class );
        Node french = mock( Node.class );
        Node german = mock( Node.class );
        Node used = mock( Node.class );
        Node autoGenerated = mock( Node.class );
        Node created = mock( Node.class );
        Node updated = mock( Node.class );

        when( list.item( 0 ) ).thenReturn( application );
        when( list.item( 1 ) ).thenReturn( group );
        when( list.item( 2 ) ).thenReturn( label );
        when( list.item( 3 ) ).thenReturn( english );
        when( list.item( 4 ) ).thenReturn( dutch );
        when( list.item( 5 ) ).thenReturn( french );
        when( list.item( 6 ) ).thenReturn( german );
        when( list.item( 7 ) ).thenReturn( used );
        when( list.item( 8 ) ).thenReturn( autoGenerated );
        when( list.item( 9 ) ).thenReturn( created );
        when( list.item( 10 ) ).thenReturn( updated );

        when( application.getTextContent() ).thenReturn( "MyApplication" );
        when( group.getTextContent() ).thenReturn( "MyGroup" );
        when( label.getTextContent() ).thenReturn( "MyLabel" );
        when( dutch.getTextContent() ).thenReturn( "Dutch" );
        when( english.getTextContent() ).thenReturn( "English" );
        when( french.getTextContent() ).thenReturn( "French" );
        when( german.getTextContent() ).thenReturn( "German" );
        when( used.getTextContent() ).thenReturn( "true" );
        when( autoGenerated.getTextContent() ).thenReturn( "false" );
        when( created.getTextContent() ).thenReturn( "2012-03-02 13:03:56" );
        when( updated.getTextContent() ).thenReturn( "" );

        LocalizedText localizedText = excelLocalizedTextReaderTester.readTest( list );
        assertEquals( "MyApplication", localizedText.getApplication() );
        assertEquals( "MyGroup", localizedText.getGroup() );
        assertEquals( "MyLabel", localizedText.getLabel() );
        assertEquals( "Dutch", localizedText.getFieldsForLanguage( TestLanguage.NL ).getText() );
        assertEquals( "French", localizedText.getFieldsForLanguage( TestLanguage.FR ).getText() );
        assertEquals( "English", localizedText.getFieldsForLanguage( TestLanguage.EN ).getText() );
        assertEquals( "German", localizedText.getFieldsForLanguage( TestLanguage.DE ).getText() );
        assertEquals( true, localizedText.isUsed() );
        assertEquals( false, localizedText.isAutoGenerated() );
        assertEquals( null, localizedText.getUpdated() );

        Calendar expectedCreatedCal = Calendar.getInstance();
        expectedCreatedCal.set( 2012, Calendar.MARCH, 2, 13, 3, 56 );

        Calendar actualCreatedCal = Calendar.getInstance();
        actualCreatedCal.setTime( localizedText.getCreated() );
        assertEquals( expectedCreatedCal.get( Calendar.HOUR ), actualCreatedCal.get( Calendar.HOUR ) );
        assertEquals( expectedCreatedCal.get( Calendar.MINUTE ), actualCreatedCal.get( Calendar.MINUTE ) );
        assertEquals( expectedCreatedCal.get( Calendar.SECOND ), actualCreatedCal.get( Calendar.SECOND ) );
        assertEquals( expectedCreatedCal.get( Calendar.DAY_OF_MONTH ), actualCreatedCal.get( Calendar.DAY_OF_MONTH ) );
        assertEquals( expectedCreatedCal.get( Calendar.MONTH ), actualCreatedCal.get( Calendar.MONTH ) );
        assertEquals( expectedCreatedCal.get( Calendar.YEAR ), actualCreatedCal.get( Calendar.YEAR ) );

    }

    public class ExcelLocalizedTextReaderTester extends ExcelLocalizedTextReader {

        public ExcelLocalizedTextReaderTester( InputStream inputStream ) {
            super( inputStream );
        }

        public LocalizedText readTest( NodeList cells ) throws ParseException {
            return readLocalizedEntity( cells );
        }
    }
}
