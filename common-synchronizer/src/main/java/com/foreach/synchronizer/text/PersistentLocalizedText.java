package com.foreach.synchronizer.text;

import com.foreach.common.spring.localization.Language;
import com.foreach.common.spring.localization.LanguageConfigurator;
import com.foreach.common.spring.localization.text.LocalizedText;
import com.foreach.common.spring.localization.text.LocalizedTextFields;

import java.util.*;

public class PersistentLocalizedText {

    private String application;
    private String group;
    private String label;
    private boolean used;
    private boolean autoGenerated;
    private Date created;
    private Date updated;
    private List<PersistentLanguageText> languageTexts;

    public PersistentLocalizedText( LocalizedText localizedText ) {
        application = localizedText.getApplication();
        group = localizedText.getGroup();
        label = localizedText.getLabel();
        used = localizedText.isUsed();
        autoGenerated = localizedText.isAutoGenerated();
        created = localizedText.getCreated() == null ? null : new Date( localizedText.getCreated().getTime() );
        updated = localizedText.getUpdated() == null ? null : new Date( localizedText.getUpdated().getTime() );
        setLanguageTexts( new ArrayList<PersistentLanguageText>() );

        for( Map.Entry<String, LocalizedTextFields> field : localizedText.getFields().entrySet() ) {
            PersistentLanguageText persistentLanguageText = new PersistentLanguageText();
            persistentLanguageText.setLanguage( field.getKey() );
            persistentLanguageText.setText( field.getValue().getText() );
            getLanguageTexts().add( persistentLanguageText );
        }
    }

    public String getApplication() {
        return application;
    }

    public void setApplication( String application ) {
        this.application = application;
    }

    public String getGroup() {
        return group;
    }

    public void setGroup( String group ) {
        this.group = group;
    }

    public String getLabel() {
        return label;
    }

    public void setLabel( String label ) {
        this.label = label;
    }

    public boolean isUsed() {
        return used;
    }

    public void setUsed( boolean used ) {
        this.used = used;
    }

    public boolean isAutoGenerated() {
        return autoGenerated;
    }

    public void setAutoGenerated( boolean autoGenerated ) {
        this.autoGenerated = autoGenerated;
    }

    public Date getCreated() {
        return created;
    }

    public void setCreated( Date created ) {
        this.created = created;
    }

    public Date getUpdated() {
        return updated;
    }

    public void setUpdated( Date updated ) {
        this.updated = updated;
    }

    public List<PersistentLanguageText> getLanguageTexts() {
        return languageTexts;
    }

    public void setLanguageTexts( List<PersistentLanguageText> languageTexts ) {
        this.languageTexts = languageTexts;
    }

    public LocalizedText convert() {
        LocalizedText localizedText = new LocalizedText();
        localizedText.setApplication( application );
        localizedText.setGroup( group );
        localizedText.setLabel( label );
        localizedText.setUsed( used );
        localizedText.setAutoGenerated( autoGenerated );

        localizedText.setUpdated( updated );
        localizedText.setCreated( created );

        Collection<LocalizedTextFields> languageCollection = new ArrayList<LocalizedTextFields>();
        for( PersistentLanguageText text : getLanguageTexts() ) {
            Language languageByCode = LanguageConfigurator.getLanguageByCode( text.getLanguage() );
            LocalizedTextFields localizedTextFields = new LocalizedTextFields( languageByCode );
            localizedTextFields.setText( text.getText() );
            languageCollection.add( localizedTextFields );
        }
        localizedText.setFieldsAsCollection( languageCollection );
        return localizedText;
    }

}
